package chrislo27.rhre

import chrislo27.rhre.registry.Game
import chrislo27.rhre.registry.GameRegistry
import com.badlogic.gdx.Gdx
import com.badlogic.gdx.Input
import com.badlogic.gdx.graphics.GL20
import com.badlogic.gdx.utils.Align
import com.badlogic.gdx.utils.Array
import ionium.registry.ScreenRegistry
import ionium.screen.Updateable
import ionium.util.Utils
import ionium.util.i18n.Localization

class InfoScreen(m: Main) : Updateable<Main>(m) {

	private val RHCRDJ: String = "https://www.reddit.com/r/rhythmheaven/comments/5h5wu0/rhythm_heaven_custom_remix_dj_v12_is_out_now_26/"

	private val patternCount: Int by lazy {
		GameRegistry.instance().gameList.flatMap(Game::patterns).filter { !it.autoGenerated }.count()
	}

	private val soundCueCount: Int by lazy {
		GameRegistry.instance().gameList.map { it.soundCues.size }.sum()
	}

	override fun render(delta: Float) {
		Gdx.gl.glClearColor(0f, 0f, 0f, 1f)
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT)

		main.batch.begin()
		main.font.setColor(1f, 1f, 1f, 1f)

		var height: Float = Utils.getHeightWithWrapping(main.font, Localization.get("info.credits"),
														Gdx.graphics.width * 0.45f)

		main.font.draw(main.batch, Localization.get("info.credits"),
					   Gdx.graphics.width * 0.025f,
					   Gdx.graphics.height * 0.95f, Gdx.graphics.width * 0.45f, Align.topLeft, true)

		val stats: String = Localization.get("info.stats", "${GameRegistry.instance().gameList.size}", "$patternCount",
											 "$soundCueCount")
		height = Utils.getHeightWithWrapping(main.font, stats,
											 Gdx.graphics.width * 0.45f)

		main.font.draw(main.batch, stats,
					   Gdx.graphics.width * 0.525f,
					   Gdx.graphics.height * 0.75f + height * 0.5f, Gdx.graphics.width * 0.45f, Align.center, true)

		Utils.getHeightWithWrapping(main.font, Localization.get("info.rhcrdj"),
									Gdx.graphics.width * 0.45f)

		main.font.draw(main.batch, Localization.get("info.rhcrdj"),
					   Gdx.graphics.width * 0.525f,
					   Gdx.graphics.height * 0.25f + height * 0.5f, Gdx.graphics.width * 0.45f, Align.right, true)
		if (Utils.isButtonJustPressed(Input.Buttons.LEFT)) {
			if (Gdx.input.x >= Gdx.graphics.width * 0.525f &&
					Gdx.graphics.height - Gdx.input.y >= Gdx.graphics.height * 0.25f - height * 0.5f - main.font.capHeight &&
					Gdx.graphics.height - Gdx.input.y <= Gdx.graphics.height * 0.25f + height * 0.5f) {
				Gdx.net.openURI(RHCRDJ)
			}
		}

		main.font.draw(main.batch, Localization.get("info.back"),
					   Gdx.graphics.width * 0.025f,
					   main.font.capHeight * 2, Gdx.graphics.width * 0.95f, Align.center, true)

		main.batch.end()
	}

	override fun renderUpdate() {
		if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) main.screen = ScreenRegistry.get("editor")
	}

	override fun tickUpdate() {
	}

	override fun getDebugStrings(array: Array<String>?) {
	}

	override fun resize(width: Int, height: Int) {
	}

	override fun show() {
	}

	override fun hide() {
	}

	override fun pause() {
	}

	override fun resume() {
	}

	override fun dispose() {
	}


}
