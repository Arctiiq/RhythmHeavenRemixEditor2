package chrislo27.rhre.registry

import chrislo27.rhre.inspections.InspectionFunction
import org.luaj.vm2.LuaValue
import org.luaj.vm2.lib.jse.CoerceJavaToLua

data class Pattern(val id: String, val name: String, val isStretchable: Boolean = false, val cues: List<PatternCue>,
				   val autoGenerated: Boolean = false, val deprecated: List<String> = mutableListOf()) {

	var inspectionFunctions: List<InspectionFunction> = listOf()

	val luaValue: LuaValue by lazy {
		val l = LuaValue.tableOf()

		l.set("id", id)
		l.set("name", name)
		l.set("deprecated", LuaValue.listOf(deprecated.map { CoerceJavaToLua.coerce(it) }.toTypedArray()))
		l.set("canAlterDuration", CoerceJavaToLua.coerce(isStretchable))
		l.set("patternCues",LuaValue.listOf(cues.map { it.luaValue }.toTypedArray()))

		return@lazy l
	}

	data class PatternCue(val id: String, val beat: Float, val track: Int, val duration: Float, val semitone: Int) {

		val luaValue: LuaValue by lazy {
			val l = LuaValue.tableOf()

			l.set("id", id)
			l.set("beat", beat.toDouble())
			l.set("track", track + 1)
			l.set("duration", duration.toDouble())
			l.set("semitone", semitone)

			return@lazy l
		}

	}

}
